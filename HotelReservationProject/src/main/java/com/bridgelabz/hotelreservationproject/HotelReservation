package com.bridgelabz.hotelreservationproject;

import java.time.Duration;
import java.time.LocalDate;
import java.util.*;


public class HotelReservation {

    Hotel addHotel(String name , String type , int weekday , int weekend) {
        return new Hotel(name , type , weekday , weekend);
    }
    public Result findCheapestHotel(ArrayList<Hotel> hotelArray , String dateS , String dateE) {  //returns calculated cheapest hotel
        int daysInBetween = getDaysInBetween(dateS , dateE);
        return getCheapestHotel(daysInBetween , hotelArray);
    }

    private static int getDaysInBetween(String dateS , String dateE){ //finds days in between

        SimpleDateFormat formatter = new SimpleDateFormat("ddMMyyyy");
        Date dateStart = new Date();
        try {
            dateStart = formatter.parse(dateS);
        } catch (Exception e) {
            System.out.println("Please enter proper starting date");
        }
        Date dateEnd = new Date();
        try {
            dateEnd = formatter.parse(dateE);
        } catch (Exception e) {
            System.out.println("Please enter proper ending date");
        }

        long difference = dateEnd.getTime() - dateStart.getTime();
        return (int) Math.ceil(difference / (1000 * 60 * 60 * 24));
    }

    private static Result getCheapestHotel(int daysInBetween , ArrayList<Hotel> hotelArray) throws NoSuchElementException { //calculates cheapest hotel and returns its details
        int currentHotelCost;
            for (Hotel currentHotel : hotelArray) {     // set weekday cost for each hotel
                currentHotelCost = daysInBetween * currentHotel.getWeekdayRate();
                currentHotel.setCostWeekDay(currentHotelCost);
            }
        Optional<Hotel> cheapestHotel = hotelArray.stream().min(Comparator.comparing(Hotel::getCostWeekday));
        Result result = new Result();
        result.setHotelName(cheapestHotel.get().getHotelName());
        result.setTotalCost(cheapestHotel.get().getCostWeekday());
        return result;
    }
    
    public Result cheapestBestRatedHotel(ArrayList<Hotel> hotelArray , Result result) {  //finds cheapest and best rated hotel
        Optional<Hotel> maxCostHotel = hotelArray.stream().max(Comparator.comparingInt(hotel -> hotel.getTotalCost()));
        Optional<Hotel> minRatingHotel = hotelArray.stream().min(Comparator.comparingInt(hotel -> hotel.getRating()));
        for (Hotel hotel : hotelArray) {
            if (hotel.getTotalCost() < maxCostHotel.get().getTotalCost() && hotel.getRating() > minRatingHotel.get().getRating()) {
                result.setRating(hotel.getRating());
                result.setHotelName(hotel.getHotelName());
                result.setTotalCost(hotel.getTotalCost());
            }
        }
        return result;
    }
    
    public Result findBestRatedHotel(ArrayList<Hotel> hotelArray , String dateS , String dateE) { //returns best rated hotel for a date range

        Result result = new Result();
        this.setCost(hotelArray , dateS , dateE);
        Optional<Hotel> maxRatingHotel = hotelArray.stream().max(Comparator.comparingInt(hotel -> hotel.getRating()));
        result.setHotelName(maxRatingHotel.get().getHotelName());
        result.setTotalCost(maxRatingHotel.get().getTotalCost());
        result.setRating(maxRatingHotel.get().getRating());
        return result;
    }
}