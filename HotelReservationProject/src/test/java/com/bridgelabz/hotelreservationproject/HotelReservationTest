package com.bridgelabz.hotelreservationproject;

import org.junit.Assert;
import org.junit.Test;

public class HotelReservationTest {
    @Test
    public void givenHotelDetails_WhenAddedForHotel_ShouldReturnEnteredName() {
        HotelReservation hotelReservation = new HotelReservation();
        Hotel newHotel = hotelReservation.addHotel("Lakewood" , "Normal" , 110 , 90 );
        Assert.assertEquals(newHotel.hotelName , "Lakewood");
    }

    @Test
    public void givenHotelDetails_WhenAddedForHotel_ShouldReturnEnteredCustomerType() {
        HotelReservation hotelReservation = new HotelReservation();
        Hotel newHotel = hotelReservation.addHotel("Lakewood" , "Normal" , 110 , 90 );
        Assert.assertEquals(newHotel.typeOfCustomer , "Normal");
    }

    @Test
    public void givenHotelDetails_WhenAddedForHotel_ShouldReturnEnteredWeekdayRate() {
        HotelReservation hotelReservation = new HotelReservation();
        Hotel newHotel = hotelReservation.addHotel("Lakewood" , "Normal" , 110 , 90 );
        Assert.assertEquals(newHotel.weekdayRate , 110);
    }

    @Test
    public void givenHotelDetails_WhenAddedForHotel_ShouldReturnEnteredWeekDayRate() {
        HotelReservation hotelReservation = new HotelReservation();
        Hotel newHotel = hotelReservation.addHotel("Lakewood" , "Normal" , 110 , 90 );
        Assert.assertEquals(newHotel.weekendRate , 90);
    }

@Test
    public void givenDateRange_WhenAddedForHotel_ShouldReturnCheapestHotelName() {
        HotelReservation hotelReservation = new HotelReservation();
        ArrayList<Hotel> hotelArray = new ArrayList<>();
        hotelArray.add(hotelReservation.addHotel("Lakewood" , "Normal" , 110  ));
        hotelArray.add(hotelReservation.addHotel("Bridgewood" , "Normal" , 160 ));
        hotelArray.add(hotelReservation.addHotel("Ridgewood" , "Normal" , 220  ));
        Result cheapestHotel = hotelReservation.findCheapestHotel(hotelArray,"10092020" , "12092020");
        Assert.assertEquals("Lakewood" , cheapestHotel.getHotelName() );
    }

    @Test
    public void givenDateRange_WhenAddedForHotel_ShouldReturnCheapestHotelRate() {
        HotelReservation hotelReservation = new HotelReservation();
        ArrayList<Hotel> hotelArray = new ArrayList<>();
        hotelArray.add(hotelReservation.addHotel("Lakewood" , "Normal" , 110  ));
        hotelArray.add(hotelReservation.addHotel("Bridgewood" , "Normal" , 160  ));
        hotelArray.add(hotelReservation.addHotel("Ridgewood" , "Normal" , 220  ));
        Result cheapestHotel = hotelReservation.findCheapestHotel(hotelArray,"10092020" , "12092020");
        Assert.assertEquals(220 , cheapestHotel.getTotalCost());
    }
    
    @Test
    public void givenHotelDetails_WhenAddedForHotel_ShouldReturnEnteredWeekdayRate() {
        HotelReservation hotelReservation = new HotelReservation();
        Hotel hotel1 = hotelReservation.addHotel("Lakewood" , "Normal" , 110 , 90 );
        Hotel hotel2 = hotelReservation.addHotel("Bridgewood" , "Normal" , 160 , 50 );
        Hotel hotel3 = hotelReservation.addHotel("Ridgewood" , "Normal" , 220 , 150 );
        Assert.assertEquals(220 , hotel3.getWeekdayRate());
    }

    @Test
    public void givenHotelDetails_WhenAddedForHotel_ShoulReturnEnteredWeekendRate() {
        HotelReservation hotelReservation = new HotelReservation();
        Hotel hotel1 = hotelReservation.addHotel("Lakewood" , "Normal" , 110 , 90 );
        Hotel hotel2 = hotelReservation.addHotel("Bridgewood" , "Normal" , 160 , 50 );
        Hotel hotel3 = hotelReservation.addHotel("Ridgewood" , "Normal" , 220 , 150 );
        Assert.assertEquals(50 , hotel2.getWeekendRate());
    }
    
    //Tests for verifying cheapest hotel details taking weekday and weekend rates into account
    @Test
    public void givenDateRange_WhenAddedForHotel_ShouldReturnCheapestHotelRateOnBasisOfWeekdaysAndWeekends() {
        HotelReservation hotelReservation = new HotelReservation();
        ArrayList<Hotel> hotelArray = new ArrayList<>();
        hotelArray.add(hotelReservation.addHotel("Lakewood" , "Normal" , 110 , 90 ));
        hotelArray.add(hotelReservation.addHotel("Bridgewood" , "Normal" , 160 , 50 ));
        hotelArray.add(hotelReservation.addHotel("Ridgewood" , "Normal" , 220 , 150  ));
        Result cheapestHotel = hotelReservation.findCheapestHotel(hotelArray , "2020-09-11" , "2020-09-14");
        Assert.assertEquals("Lakewood" , cheapestHotel.getHotelName());
    }
    
    //Test for verifying hotel rating
    @Test
    public void givenHotelDetails_WhenAddedForHotel_ShouldReturnEnteredRating() {
        HotelReservation hotelReservation = new HotelReservation();
        Hotel newHotel = hotelReservation.addHotel("Lakewood" , "Normal" , 110 , 90 , 3);
        Assert.assertTrue(newHotel.getRating().equals(3));
    }
    
    //Tests for verifying cheapest and best rated hotel
    @Test
    public void givenDateRange_WhenAddedForHotel_ShouldReturnCheapestHotelRateOnBasisOfCostAndRating() {
        HotelReservation hotelReservation = new HotelReservation();
        ArrayList<Hotel> hotelArray = new ArrayList<>();
        hotelArray.add(hotelReservation.addHotel("Lakewood" , "Normal" , 110 , 90 , 3));
        hotelArray.add(hotelReservation.addHotel("Bridgewood" , "Normal" , 160 , 50 , 4));
        hotelArray.add(hotelReservation.addHotel("Ridgewood" , "Normal" , 220 , 150  , 5));
        Result cheapestHotel = hotelReservation.findCheapestHotel(hotelArray , "2020-09-11" , "2020-09-12");
        Assert.assertEquals("Bridgewood" , cheapestHotel.getHotelName());
    }
}